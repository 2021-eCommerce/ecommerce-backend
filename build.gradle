buildscript {
    ext {
        springVersion = "2.4.2"
        queryDslVersion = "5.0.0"
        jwtVersion = "0.11.5"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    //querydsl 추가
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'

    // openAPI
    id 'com.epages.restdocs-api-spec' version "0.16.4"
}

group = 'store.juin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.4.2.Final"
    lombokVersion = "1.18.20"
    lombokMapstructBindingVersion = "0.2.0"
}

dependencies {
    // jpa
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"

    // web
    implementation "org.springframework.boot:spring-boot-starter-web:${springVersion}"

    // security
    implementation "org.springframework.boot:spring-boot-starter-security:${springVersion}"
    implementation 'org.springframework.session:spring-session:1.3.2.RELEASE'

    // MySQL
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc:${springVersion}"
    runtimeOnly 'mysql:mysql-connector-java'

    // lombok
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"

    // p6spy logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'

    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // mockito
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:4.8.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.10' // java 17 mock 오류 발생해서 추가
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // s3
    implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws', version: '2.4.2'

    // ses
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-ses', version: '1.12.399'

    // rest doc
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // 8. openAPI3 추가
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'
    // caffeine cache
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.5.2'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.3'

    // MariaDB
//	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // redis
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'

    // DTO Mapper
//    implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"
//    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // thymeleaf
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

test {
    useJUnitPlatform()
    exclude 'store/juin/api/ApiApplicationTests.class'
}

openapi3 {
    server = 'https://localhost:13579'
    title = 'SPRING API'
    description = 'SPRING API Specification'
    version = '0.0.1'
    format = 'yaml'
    outputDirectory = 'src/main/resources/static/docs/.'
}

// buildDir에 추가 안 하고 src 아래에 직접 추가
bootJar {
    delete 'src/main/resources/static/docs/openapi3.yaml'
    dependsOn 'openapi3'
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝